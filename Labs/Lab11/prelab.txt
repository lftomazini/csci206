Luis Felipe Tomazini
T 1pm
Lab 11 - prelab.txt

1.1 Stack smashing is a form of attack that exploits the stack segment of the memory. 

1.2 Stack smashing is possible because if you write more than the space allocated for the buffer it will go to other regions in memory. It will go over the buffer and reach the return variable, eventually. By overwriting the return variable the program will point to another return address. This new return address may have malicious code, what makes the attack possible.

1.3 To disassemble machine code means to go from machine language to assembly language. E.g. 03a0f021 —- disassemble —-> move s8, sp

1.4 The code is different beacause of the instruction set architecture. On the paper they use x86. For our tests it is used MIPS. Thus the great difference is not the buffer1 + 24 vs. buffer1 + 12 but the ISA.

1.5 The function ‘function’ overwrote the return address of the main, now it is returning 0 instead of the expected value of 1.
